#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
#
# Copyright 2020 Joyent Inc.
#

#
# This script gets called by systemd for the triotn-fs.service start up. It
# mainly exists as somewhat-anaalog to the fs-joyent service on SmartOS.
# On Linux, importing ZFS is handled for us, but we need to support the
# following:
#
# * Identify the system pool
# * noimport
# * factory reset
#

set -o errexit
set -o pipefail
set -o xtrace

# Assume the system zpool is zones, but if a different system pool
# identifies itself (by virtue of the .system_pool file being present in the
# pool's root dataset), then use that system pool instead.
SYS_ZPOOL=zones
mapfile -t all_pools < <(zpool list -Ho name)

for pool in "${all_pools[@]}"; do
    if [[ -f /${pool}/.system_pool ]]; then
        if [[ -d /opt/triton/config ]]; then
            ln -s "/${pool}/" /opt/triton/config/system_pool
        fi
    SYS_ZPOOL="$pool"
    fi
done

# Deal with noimport
# Because we're being called after zfs-import.target, the pool (if it exists)
# will already be imported. In this case, we'll simply unmount it.
if grep -q -w noimport=true /proc/cmdline ; then
    zpool export "$SYS_ZPOOL"
    # If we're not importing the pool, we don't want to do anything that comes
    # later in this script
    exit 0
fi

# Danger zone
function destroy_zpools
{
    for pool in "${all_pools[@]}" ; do
        zpool destroy -f "${pool}"
    done
    exit 0
}

# If the destroy_zpools boot parameter is set, destroy all zpools
if grep -q -w 'destroy_zpools=true' /proc/cmdline ; then
    destroy_zpools
fi

# A machine is reset to its original unsetup state (i.e. a 'factory reset')
# when the smartdc:factoryreset ZFS user property is set on the var dataset.
reset=$(zfs get -H -o value smartdc:factoryreset ${SYS_ZPOOL}/var)
if [ "${reset}" == "yes" ]; then
    destroy_zpools
fi
