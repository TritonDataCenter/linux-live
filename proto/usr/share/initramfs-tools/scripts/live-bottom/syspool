#!/bin/sh

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright 2021 Joyent, Inc.
#

#
# This script is responsible for mounting file systems required by systemd from
# the system zpool prior to starting systemd.
#

if [ "$1" = "prereqs" ]; then
	exit 0
fi

# shellcheck disable=1091
. /scripts/functions

log_begin_msg "triton-syspool"

is_syspool()
{
	p=$1
	zfs mount "$p" || return 1

	mp=$(zfs list -Ho mountpoint "$p")
	if [ -f "$mp/.system_pool" ]; then
		return 0
	fi
	zfs umount "$p"
	return 1
}

sethostid
modprobe zfs
zpool import -aN

syspool=
for pool in $(zfs list -Ho name -d0); do
	if is_syspool "$pool"; then
		syspool=$pool
		log_success_msg "System pool is ${syspool}"
		mkdir -p /run/triton || true
		ln -s "/${syspool}/" /run/triton/system_pool
		break
	fi
done

# Handle factoryreset
if grep -q -w 'destroy_zpools=true' /proc/cmdline ; then
	log_warning_msg 'destroy_pools kernel command detected.'
	destroy_zpools=1
fi
reset=$(zfs get -H -o value smartdc:factoryreset "${syspool}/var")
if [ "${reset}" = "yes" ]; then
	log_warning_msg "${syspool}/var dataset has factoryrest property."
	destroy_zpools=1
fi

if [ -n "${destroy_zpools}" ]; then
	destroy_out=$(zpool destroy "$syspool" 2>&1)
	destroy_retval=$?
	if [ $destroy_retval -gt 0 ] ; then
		log_success_msg "zpool destroy succeeded"
		log_success_msg "$(zpool list)"
	else
		log_failure_msg "zpool destroy failed with code $destroy_retval: $destroy_out"
	fi
	exit
fi

# XXX - TODO: We want to handle noimport here, but even if we export the pool
# the builtin systemd zfs mounting stuff will re-import it later.
if grep -q -w noimport=true /proc/cmdline ; then
	for pool in $(zfs list -Ho name -d0); do
		export_out=$(zpool export "$pool" 2>&1)
		export_retval=$?
		if [ $export_retval -gt 0 ]; then
			log_failure_msg "zpool export failed with code $export_retval: $export_out"
		else
			log_success_msg "zpool exported"
			log_success_msg "$(zpool list)"
		fi
	done
	exit 0
fi

# Mount all available zfs filesystems in the system zpool.
if [ -n "$syspool" ]; then
	(zfs list -Ho canmount,name,mountpoint -p -r "$syspool" || true) | \
	while IFS="$(printf '\t')" read -r canmount name mountpoint; do
		[ "$canmount" = on ] || continue
		# shellcheck disable=2154
		mp="$rootmnt/$mountpoint"
		mkdir -p "$mp"
		#echo "Triton mounting zfs dataset $name on $mp"
		# XXX - TODO: This improperly mounts legacy.
		# E.g., zones/var gets mounted on /legacy.
		mount -o zfsutil -t zfs "$name" "$mp"
	done
fi

log_end_msg

exit 0
