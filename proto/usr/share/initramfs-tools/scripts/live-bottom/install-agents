#!/bin/sh -e
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
#
# Copyright 2020 Joyent Inc.
#

# Install triton agents.
# This file will copy agents from /usr/triton to
# /opt/smartdc/agents/lib/node_modules which is the expected path for
# agents in SmartOS and also the place where cn-agent will try to find
# and update existing agents using agent images.


PREREQ="triton-general"

# Pre-script requirements.
if [ "$1" = "prereqs" ]; then
    echo "${PREREQ}"
	exit 0
fi

export PATH=/bin:/usr/bin:/usr/sbin:/usr/node/bin:/usr/triton/bin

set -euo pipefail

ROOT="/opt/smartdc/agents"

if [[ ! -d ${ROOT}/etc/config-agent.d ]]; then
    echo "Creating dir ${ROOT}/etc/config-agent.d";
    mkdir -p ${ROOT}/etc/config-agent.d;
fi

if [[ ! -d ${ROOT}/lib/node_modules ]]; then
    echo "Creating dir ${ROOT}/lib/node_modules"; 
    mkdir -p ${ROOT}/lib/node_modules;
fi

if [[ ! -d ${ROOT}/bin ]]; then
    echo "Creating dir ${ROOT}/bin"; 
    mkdir -p ${ROOT}/bin;
fi

# First copy the agents we need:

if [[ ! -d ${ROOT}/lib/node_modules/config-agent ]]; then
    echo "Copying config-agent from /usr/triton/sdc-config-agent"
    cp -rp /usr/triton/sdc-config-agent ${ROOT}/lib/node_modules/config-agent
fi

if [[ ! -f ${ROOT}/lib/node_modules/config-agent/image_uuid ]]; then
    echo "Generating uuid for config-agent image"
    touch ${ROOT}/lib/node_modules/config-agent/image_uuid
    uuid -v4 > ${ROOT}/lib/node_modules/config-agent/image_uuid
fi

if [[ ! -d ${ROOT}/lib/node_modules/cn-agent ]]; then
    echo "Copying cn-agent from /usr/triton/sdc-cn-agent"
    cp -rp /usr/triton/sdc-cn-agent ${ROOT}/lib/node_modules/cn-agent
fi

if [[ ! -f ${ROOT}/lib/node_modules/cn-agent/image_uuid ]]; then
    echo "Generating uuid for cn-agent image"
    touch ${ROOT}/lib/node_modules/cn-agent/image_uuid
    uuid -v4 > ${ROOT}/lib/node_modules/cn-agent/image_uuid
fi

if [[ ! -d ${ROOT}/lib/node_modules/net-agent ]]; then
    echo "Copying net-agent from /usr/triton/sdc-net-agent"
    cp -rp /usr/triton/sdc-net-agent ${ROOT}/lib/node_modules/net-agent
fi

if [[ ! -f ${ROOT}/lib/node_modules/net-agent/image_uuid ]]; then
    echo "Generating uuid for net-agent image"
    touch ${ROOT}/lib/node_modules/net-agent/image_uuid
    uuid -v4 > ${ROOT}/lib/node_modules/net-agent/image_uuid
fi

# We begin installing config-agent first, since it will create the config
# files for cn-agent and net-agent.

if [[ ! -L ${ROOT}/bin/config-agent ]]; then
    echo "Creating symlink to config-agent binary in ${ROOT}/bin"
    ln -s ${ROOT}/lib/node_modules/config-agent/bin/agent.sh ${ROOT}/bin/config-agent
fi

if [[ ! -f ${ROOT}/lib/node_modules/config-agent/systemd/triton-config-agent.service ]]; then
    echo "Running config-agent installer"
    # TODO: apm.js in cn-agent needs to be updated to work in both, linux and smartos
    # In the meanwhile, could also install the packages here by providing just some
    # required env vars, given the package scripts are merely bash files.
    # $(/usr/node/bin/node ${ROOT}/lib/node_modules/cn-agent/lib/apm.js install )
    # Note we don't need npm_config_smfdir at all, but it's used as a guard to
    # run or not the installer, hence we providing some value.
    npm_config_prefix="${ROOT}" \
        npm_config_etc="${ROOT}/etc" \
        npm_package_name='config-agent' \
        npm_config_smfdir="${ROOT}" \
        ${ROOT}/lib/node_modules/config-agent/npm/postinstall.sh
fi

if [[ ! -f /usr/lib/systemd/triton-config-agent.service ]]; then
    cp ${ROOT}/lib/node_modules/config-agent/systemd/triton-config-agent.service /usr/lib/systemd/system/triton-config-agent.service
    systemctl enable triton-config-agent
    systemctl start triton-config-agent
fi

# cn-agent should be next, since it can be used to install other stuff too.

if [[ ! -L ${ROOT}/bin/cn-agent ]]; then
    echo "Creating symlink to cn-agent binary in ${ROOT}/bin"
    ln -s ${ROOT}/lib/node_modules/cn-agent/bin/cn-agent.js ${ROOT}/bin/cn-agent
fi

if [[ ! -f ${ROOT}/etc/config-agent.d/cn-agent.json ]]; then
    echo "Running cn-agent installer"

    npm_package_version=$(/usr/node/bin/json -f ${ROOT}/lib/node_modules/cn-agent/package.json version)

    npm_config_prefix="${ROOT}" \
        npm_config_etc="${ROOT}/etc" \
        npm_package_name='cn-agent' \
        npm_config_smfdir="${ROOT}" \
        npm_package_version=$npm_package_version \
        ${ROOT}/lib/node_modules/cn-agent/npm/postinstall.sh
fi

if [[ ! -f /usr/lib/systemd/triton-cn-agent.service ]]; then
    cp ${ROOT}/lib/node_modules/cn-agent/systemd/triton-cn-agent.service /usr/lib/systemd/system/triton-cn-agent.service
    systemctl enable triton-cn-agent
    systemctl start triton-cn-agent
fi

# net-agent, since it watches both, vms and cns.

if [[ ! -L ${ROOT}/bin/net-agent ]]; then
    echo "Creating symlink to net-agent binary in ${ROOT}/bin"
    ln -s ${ROOT}/lib/node_modules/net-agent/bin/net-agent.js ${ROOT}/bin/net-agent
fi

if [[ ! -f ${ROOT}/etc/config-agent.d/net-agent.json ]]; then
    echo "Running net-agent installer"

    npm_package_version=$(/usr/node/bin/json -f ${ROOT}/lib/node_modules/net-agent/package.json version)

    npm_config_prefix="${ROOT}" \
        npm_config_etc="${ROOT}/etc" \
        npm_package_name='net-agent' \
        npm_config_smfdir="${ROOT}" \
        npm_package_version=$npm_package_version \
        ${ROOT}/lib/node_modules/net-agent/npm/postinstall.sh
fi

if [[ ! -f /usr/lib/systemd/triton-net-agent.service ]]; then
    cp ${ROOT}/lib/node_modules/net-agent/systemd/triton-net-agent.service /usr/lib/systemd/system/triton-net-agent.service
    systemctl enable triton-net-agent
    systemctl start triton-net-agent
fi
